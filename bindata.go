// Code generated by go-bindata.
// sources:
// templates/article.tmpl
// static/breadcrumb.svg
// static/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesArticleTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x4d\x8b\xdb\x30\x10\x3d\x27\xbf\x42\xd5\xb9\xb6\x68\xb7\x87\xa5\x58\x81\xed\x52\x68\x2f\xa5\xb0\x14\x7a\x5b\x14\x79\x62\x89\x95\x3f\x2a\xc9\xf1\x06\xe3\xff\xde\x91\xed\x24\x8e\xd7\xa1\xe9\x29\xb2\xe6\xcd\xc7\x7b\x4f\x99\xe4\x5d\x5a\x4a\x7f\xa8\x80\x28\x9f\x9b\xcd\x3a\x09\x3f\xc4\x88\x22\xe3\x14\x0a\xba\x59\x13\x92\x28\x10\x69\x38\xe0\x31\x07\x2f\x88\x54\xc2\x3a\xf0\x9c\xd6\x7e\x17\xdd\xd3\x69\x48\x79\x5f\x45\xf0\xa7\xd6\x7b\x4e\x7f\x47\xbf\x1e\xa2\xc7\x32\xaf\x84\xd7\x5b\x03\x94\xc8\xb2\xf0\x50\x60\xde\xf7\xaf\x1c\xd2\x0c\x2e\x32\x0b\x91\x03\xa7\x7b\x0d\x4d\x55\x5a\x3f\x01\x37\x3a\xf5\x8a\xa7\xb0\xd7\x12\xa2\xfe\xe3\x3d\xd1\x85\xf6\x5a\x98\xc8\x49\x61\x80\x7f\x38\x16\x32\xba\x78\x21\x16\x0c\xa7\xce\x1f\x0c\x38\x05\x80\x95\x94\x85\x1d\xa7\xcc\x79\x9c\x43\xb2\x21\x12\x4b\xe7\x06\x72\xec\xc8\x2e\xd9\x96\xe9\x61\x2c\x94\xea\x3d\x91\x46\x38\xc7\x69\x08\x83\x8d\x1a\x2b\xaa\x0a\xec\xd8\x69\x09\x82\xa1\x55\xa2\x8b\xaa\xf6\xb3\x54\x07\xc2\x4a\x45\x49\x50\x99\x53\x0f\xaf\x38\x53\x65\x84\x04\x55\x1a\x8c\x73\xfa\x34\x00\xd8\xa9\x36\xc3\xe2\xe3\x24\x93\xe3\xa4\x63\x2e\x74\x11\xdd\x30\xd9\x04\xd7\x8f\x57\x9b\xa5\x0a\x5b\x8b\xbf\xd2\xd6\xf9\x36\x68\xb2\x22\xa4\x6d\x89\xc5\x17\x00\x24\xfe\x72\x0e\x91\xae\x0b\x31\x14\xf9\x1f\x35\x22\xed\x21\xa7\x9b\x44\xdc\x82\x8b\x82\x67\x27\x8f\xda\x36\xfe\x29\xbc\xea\x3a\xba\xc1\xe3\x0f\x7c\x12\x5d\x97\x30\xb1\x49\x98\xd1\xc8\x6f\x18\x0d\x8a\xb4\x9f\x25\x61\xb5\x09\xa4\xd4\xc7\x29\x18\xbf\xd6\x2b\x44\xe9\x1d\x89\x1f\x2c\x3a\x8e\x6e\x0f\xf0\x65\xf2\x0e\xa4\xd7\x65\xf1\x86\xf9\x45\xee\x55\xda\xc7\xec\x9e\x0b\x19\xdb\x3e\xd6\xd6\xe2\xd3\xed\xba\xab\xc8\x48\x0e\x90\xb6\x45\x32\x81\xed\xb2\x58\x97\x39\xff\xa1\xd4\xa2\x50\xe7\x9b\x5b\x9f\xd9\xa9\xff\xfc\x8d\x8d\x44\x9f\xc6\xf8\xa4\xe6\x42\xf6\x29\x6b\x2a\xef\x31\xb5\x9f\xef\x6d\xd2\xe0\xc6\x59\x95\xf1\xfa\xf9\x9a\x06\x3d\x5a\xe7\xd9\x1c\x8f\x57\x94\x38\x2b\xf1\xcf\x88\x9b\xc9\x7d\x66\xac\x69\x9a\x38\x1b\x76\x41\x2c\xcb\x9c\xe9\x5c\x64\xe0\x98\xc6\x7d\xe3\x58\x2e\x3c\x58\x5c\x2c\xcc\x1d\x1c\x4a\xce\xdc\x3e\x63\xa6\x94\x2f\xcf\x9f\xee\xab\xd7\x18\xbf\xc6\x4e\xea\x6e\xde\x28\xac\xaf\x0b\x2b\xd4\xdd\x00\x45\x4f\x82\x03\x27\x7d\x47\x19\xae\x39\x31\x0f\x5e\x71\x26\xec\xaa\x89\x1b\xf1\x37\xdc\xda\xf3\x8c\x84\x0d\x1b\x0d\x67\xe9\x57\xfb\xdf\x00\x00\x00\xff\xff\x17\x9d\x16\x51\xeb\x05\x00\x00")

func templatesArticleTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesArticleTmpl,
		"templates/article.tmpl",
	)
}

func templatesArticleTmpl() (*asset, error) {
	bytes, err := templatesArticleTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/article.tmpl", size: 1515, mode: os.FileMode(436), modTime: time.Unix(1441300841, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticBreadcrumbSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8d\x41\x0f\x82\x30\x0c\x85\xef\xfc\x8a\xa6\x5e\xa1\xdb\x60\x22\x1a\xc6\xc1\x83\x27\xfc\x11\x26\x20\x5b\x32\x85\xc8\x42\x89\xbf\xde\x81\x4d\xdb\x7c\xc9\x7b\x79\xaf\x9e\x97\x01\xd6\x97\x7f\xcf\x06\x6d\x08\xd3\x45\x08\x66\x26\x2e\x68\xfc\x0c\x22\x97\x52\x8a\xe8\x40\x60\xd7\x05\x6b\x50\x95\x08\xb6\x77\x83\x0d\x7f\x5e\x5c\xcf\xd7\x71\x35\x28\x41\x82\x2a\xe3\x62\x93\xd4\xd3\x23\x58\x78\x3a\xef\x0d\x1e\x6e\xfb\x20\x74\x06\xef\x25\x9d\x52\xdd\x1e\xb7\x4f\xe7\xb6\xa2\x2a\xad\x7c\x56\x90\x4a\xe3\xb5\x9b\xa8\x72\xaf\x33\xbd\xa3\xfe\xa2\x88\x51\x5b\x7b\x93\xfc\x02\x00\x00\xff\xff\x20\xc1\x2d\x4f\xa6\x00\x00\x00")

func staticBreadcrumbSvgBytes() ([]byte, error) {
	return bindataRead(
		_staticBreadcrumbSvg,
		"static/breadcrumb.svg",
	)
}

func staticBreadcrumbSvg() (*asset, error) {
	bytes, err := staticBreadcrumbSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/breadcrumb.svg", size: 166, mode: os.FileMode(416), modTime: time.Unix(1441299421, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _staticStylesCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdd\x6e\xb3\x38\x10\xbd\xcf\x53\x20\xad\x56\x69\x2f\x1c\x91\x34\x7f\x4b\x1e\x66\x65\xec\x01\xac\x18\x8c\x6c\xd3\x24\x5a\xf5\xdd\x77\xb0\xf9\x0f\x4d\x52\x7d\x6d\x2e\x2a\xc6\xf6\x39\x67\x66\x0e\x83\x63\xc5\x6f\xc1\x7f\x8b\x00\xff\x72\xaa\x53\x51\x44\x41\x78\x72\x8f\x25\xe5\x5c\x14\xa9\x7b\xfe\x5a\x2c\x56\x19\x50\x0e\x9a\x5c\x34\x2d\x4b\xd0\xcd\x99\x8b\xe0\x36\x8b\x82\x75\x18\xfe\xed\x4f\xc5\x94\x9d\x53\xad\xaa\x82\x13\xa6\xa4\xd2\x51\xf0\x57\x18\xfe\x73\xa0\x07\xbf\x9c\x81\x48\x33\x1b\x05\xdb\x7d\x79\x1d\xc2\x8e\xe1\x8e\x3b\xb7\xdc\x8b\x22\x12\x12\x3c\x45\x2b\xab\x46\x61\xed\xd1\x7c\x7c\x20\xd2\x00\xd5\x2c\x6b\x40\x13\x55\xe0\x9e\x4d\x58\x5e\x03\x43\x0b\x83\x8b\x5a\x24\xa7\x21\x1f\xa3\x92\xbd\xd5\x39\x04\x24\xd8\xe3\xbe\xf7\xb1\xd8\x8f\x4e\xcd\x6c\x76\x31\xe3\xdb\x66\x59\x69\x64\x8f\x82\x42\x15\x30\xd2\x69\x55\x89\x39\xb7\x28\x7d\x65\x9d\xaa\xe1\x59\xa2\x29\x17\x95\x41\xb9\x6d\xbc\xe5\x49\x92\x64\x26\xc5\x28\x51\xac\x32\x4d\xa2\x33\xea\xdc\xa9\x21\xcc\x66\x5d\xff\xe6\x90\x22\x72\x81\xf8\x2c\x2c\x11\x45\x59\x59\x52\x4a\xca\x20\x53\xb2\x6f\xce\x9d\x92\x9c\x62\x6a\xaf\xd9\xa2\x2d\xe5\xfa\xb8\x7d\xa1\x96\x13\xf0\xdf\x30\x87\xab\xbb\x32\xc2\x0a\x85\x16\xd7\x20\xa9\x15\x9f\x30\x11\xe7\xe4\x4e\xc9\xb3\xcd\x4c\xfa\x75\x80\x0b\x83\x45\xba\x45\x81\x28\xa4\x28\x80\xc4\x52\xb1\xf3\x69\x60\xb9\x8f\xed\x8c\xe5\x24\x58\x5b\x17\xbd\xa4\xcc\x79\x80\xac\xc2\x35\xe4\xa7\xb9\x37\x30\xa7\x57\x72\x57\x49\xf5\x09\x3a\x91\xea\x12\x05\x99\xe0\x1c\x0a\x1f\xb5\x70\xb5\xa4\x5f\x02\x29\x45\x69\x84\x69\x5c\x9e\x09\x0b\x8e\x11\x6a\x6f\xd6\xad\xf2\x0b\xb8\xdf\x0a\x34\x3f\xa1\x52\xa4\xc8\x8b\x36\x1d\x39\xd4\xfb\xd6\x7b\x74\xda\xf0\x58\xe3\x7f\xa6\xab\x3c\x6e\xed\x27\x85\xb1\xc4\xd8\x9b\x04\x62\x6f\x25\x0c\x5f\x83\xbb\x2c\x86\xc3\x65\x92\xf9\x03\x22\x82\x79\xe4\x0d\xdb\x83\xea\x77\xe0\x3b\xac\xff\xfe\x89\x78\x87\x49\x10\xe2\x3c\x67\xf3\xae\xb6\x1c\x98\xd2\xd4\xbb\xa7\xcf\xcb\xf7\x79\xbd\x99\xf4\xf9\x19\x5d\x44\x13\x3b\x78\xad\x0a\x0b\x35\x4c\xa5\xe5\xdb\xb2\xdf\xba\x32\x9f\xe9\xf2\x7d\xea\x5c\x1a\x1b\x25\x2b\xdb\xf0\xbb\xfe\x1c\x5e\xc9\x30\x92\x14\xbb\xc3\x32\x21\xf9\x3c\xfb\x72\x79\x0f\x62\x80\xd5\xac\xbf\xdc\xe0\x47\x09\xc5\xca\x5a\x95\x23\xd0\x5c\x4e\xad\x9c\x9f\xda\x60\xb3\x7b\x8a\x46\x58\xa5\x35\xd6\xa1\x9d\xa4\x7e\x18\xb7\x6a\x5c\x7f\x95\x14\xfc\x9b\xe1\x37\x86\x7a\xe4\xa5\xc6\x30\x73\x83\xc1\xd9\xcc\x6a\x8c\x26\x4a\x23\x69\x55\xcf\x53\x46\x0d\xbc\xe4\x42\x1c\xde\x7e\x88\xc5\x38\xb2\xbd\xc2\x4e\xd5\xcf\x3f\xd9\xc9\xa1\xfe\x79\x98\xc1\x0d\xe1\x8f\x3f\xcf\x13\x43\xb5\x52\x50\xcb\xcf\x01\xeb\xf0\x10\xf4\xb9\x21\x5a\xba\xdd\xb1\x65\xeb\x26\x7f\x1f\x6a\x8d\xba\xee\x24\xb9\xca\x37\x13\x92\xa1\x47\x40\xdf\x71\xff\x2b\xf2\xb4\xe1\x57\xf5\x60\xb7\xc8\xbf\xda\x6d\x8e\x93\x4b\x4f\x47\xd2\x28\xe9\x03\x73\x9f\xe7\x16\xbb\xa0\x39\x8c\xae\x32\xdb\x30\x0c\xd6\xfb\x19\x0b\x4d\x50\xee\x54\x0e\x9c\x39\xbc\x98\x7c\x74\xa9\x3e\x28\xde\x37\xfe\xfb\x5a\xfc\x1f\x00\x00\xff\xff\xde\xf4\x25\x9b\x42\x0a\x00\x00")

func staticStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_staticStylesCss,
		"static/styles.css",
	)
}

func staticStylesCss() (*asset, error) {
	bytes, err := staticStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/styles.css", size: 2626, mode: os.FileMode(436), modTime: time.Unix(1441300592, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/article.tmpl": templatesArticleTmpl,
	"static/breadcrumb.svg": staticBreadcrumbSvg,
	"static/styles.css": staticStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"breadcrumb.svg": &bintree{staticBreadcrumbSvg, map[string]*bintree{
		}},
		"styles.css": &bintree{staticStylesCss, map[string]*bintree{
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"article.tmpl": &bintree{templatesArticleTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

